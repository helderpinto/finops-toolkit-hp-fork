{
    "queries": [
        {
            "version": "1.0",
            "source": "Advisor",
            "provider": "Microsoft",
            "type": "AdvisorCostRecommendations",
            "query": "advisorresources | where type == 'microsoft.advisor/recommendations' | where properties.category == 'Cost' | project x_RecommendationId=id, x_ResourceGroupName=tolower(resourceGroup), SubAccountId=subscriptionId, x_RecommendationCategory=tostring(properties.category), x_RecommendationImpact=tostring(properties.impact), x_RecommendationTypeId= tostring(properties.recommendationTypeId), x_RecommendationControl=tostring(properties.extendedProperties.recommendationControl), x_RecommendationMaturityLevel=tostring(properties.extendedProperties.maturityLevel), x_RecommendationDescription=tostring(properties.shortDescription.problem), x_RecommendationSolution=tostring(properties.shortDescription.solution), ResourceId=tolower(properties.resourceMetadata.resourceId), x_ResourceType=tolower(properties.impactedField), ResourceName=tolower(properties.impactedValue), x_RecommendationDetails=tostring(properties.extendedProperties), x_RecommendationDate=tostring(properties.lastUpdated) | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "UnattachedDisksRecommendations",
            "query": "resources | where type =~ 'microsoft.compute/disks' and isempty(managedBy) | extend diskState = tostring(properties.diskState) | where diskState != 'ActiveSAS' and tags !contains 'ASR-ReplicaDisk' and tags !contains 'asrseeddisk' | extend DiskId=id, DiskIDfull=id, DiskName=name, SKUName=sku.name, SKUTier=sku.tier, DiskSizeGB=tostring(properties.diskSizeGB), Location=location, TimeCreated=tostring(properties.timeCreated), SubId=subscriptionId | order by DiskId asc | project DiskId, DiskIDfull, DiskName, DiskSizeGB, SKUName, SKUTier, resourceGroup, Location, TimeCreated, subscriptionId, type| project     x_RecommendationId=strcat(tolower(DiskId),'-unattached'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='High',     x_RecommendationTypeId='e0c02939-ce02-4f9d-881f-8067ae7ec90f',     x_RecommendationControl='UsageOptimization/OrphanedResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Unattached (orphaned) disk is incurring in storage costs',     x_RecommendationSolution='Remove or downgrade the unattached disk',     ResourceId = tolower(DiskId),     x_ResourceType=type,     ResourceName=tolower(DiskName),     x_RecommendationDetails= strcat('{\\\"DiskSizeGB\\\": ', DiskSizeGB, ', \\\"SKUName\\\": \\\"', SKUName, '\\\", \\\"SKUTier\\\": \\\"', SKUTier, '\\\", \\\"Location\\\": \\\"', Location, '\\\", \\\"TimeCreated\\\": \\\"', TimeCreated, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "NonSpotAKSClustersRecommmendations",
            "query": "resources | where type == 'microsoft.containerservice/managedclusters' | mvexpand AgentPoolProfiles = properties.agentPoolProfiles| project id, type, ProfileName = tostring(AgentPoolProfiles.name), Sku = tostring(sku.name), Tier = tostring(sku.tier), mode = AgentPoolProfiles.mode, AutoScaleEnabled = AgentPoolProfiles.enableAutoScaling, SpotVM = AgentPoolProfiles.scaleSetPriority, VMSize = tostring(AgentPoolProfiles.vmSize), NodeCount = tostring(AgentPoolProfiles.['count']), minCount = tostring(AgentPoolProfiles.minCount), maxCount = tostring(AgentPoolProfiles.maxCount), Location=location, resourceGroup, subscriptionId, AKSname = name| where AutoScaleEnabled == 'true' and isnull(SpotVM)| project     x_RecommendationId=strcat(tolower(id),'-notSpot'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='Medium',     x_RecommendationTypeId='c26abcc2-d5e6-4654-be4a-7d338e5c1e5f',     x_RecommendationControl='UsageOptimization/OptimizeResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='The AKS cluster agent pool scale set is not utilizing Spot VMs',     x_RecommendationSolution='Consider enabling Spot VMs for this AKS cluster to optimize costs, as Spot VMs offer significantly lower pricing compared to regular VMs',     ResourceId = tolower(id),     x_ResourceType=type,     ResourceName=tolower(AKSname),     x_RecommendationDetails= strcat('{\\\"AutoScaleEnabled\\\": ', AutoScaleEnabled, ', \\\"SpotVM\\\": \\\"', SpotVM, '\\\", \\\"VMSize\\\": \\\"', VMSize, '\\\", \\\"Location\\\": \\\"', Location, '\\\", \\\"NodeCount\\\": \\\"', NodeCount, '\\\", \\\"minCount\\\": \\\"', minCount, '\\\", \\\"maxCount\\\": \\\"', maxCount, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "NotDeallocatedVMsRecommendations",
            "query": "resources | where type =~ 'microsoft.compute/virtualmachines' and tostring(properties.extended.instanceView.powerState.displayStatus) != 'VM deallocated' and tostring(properties.extended.instanceView.powerState.displayStatus) != 'VM running' | extend PowerState=tostring(properties.extended.instanceView.powerState.displayStatus) | extend Location=location, type| project id, PowerState, Location, resourceGroup, subscriptionId, VMName=name, type| project     x_RecommendationId=strcat(tolower(id),'-notDeallocated'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='Medium',     x_RecommendationTypeId='ab2ff882-e927-4093-9d11-631be0219975',     x_RecommendationControl='UsageOptimization/OptimizeResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Virtual machine is powered off but not deallocated',     x_RecommendationSolution='Deallocate the virtual machine to ensure it does not incur in compute costs',     ResourceId = tolower(id),     x_ResourceType=type,     ResourceName=tolower(VMName),     x_RecommendationDetails= strcat('{\\\"PowerState\\\": ', PowerState, ',\\\"Location\\\": \\\"', Location, '\\\" }'),    x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "AppGWsWithoutBackendRecommendations",
            "query": "resources | where type =~ 'Microsoft.Network/applicationGateways' | extend backendPoolsCount = array_length(properties.backendAddressPools),SKUName= tostring(properties.sku.name), SKUTier= tostring(properties.sku.tier),SKUCapacity=properties.sku.capacity,backendPools=properties.backendAddressPools,resourceGroup=strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)| project id, name, SKUName, SKUTier, SKUCapacity,resourceGroup,subscriptionId, AppGWName=name, type, Location=location| join (    resources    | where type =~ 'Microsoft.Network/applicationGateways'    | mvexpand backendPools = properties.backendAddressPools    | extend backendIPCount = array_length(backendPools.properties.backendIPConfigurations)    | extend backendAddressesCount = array_length(backendPools.properties.backendAddresses)    | extend backendPoolName  = backendPools.properties.backendAddressPools.name    | summarize backendIPCount = sum(backendIPCount) ,backendAddressesCount=sum(backendAddressesCount) by id) on id| project-away id1| where  (backendIPCount == 0 or isempty(backendIPCount)) and (backendAddressesCount==0 or isempty(backendAddressesCount))| project     x_RecommendationId=strcat(tolower(id),'-idle'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='High',     x_RecommendationTypeId='4f69df93-5972-44e0-97cf-4343c2bcf4b8',     x_RecommendationControl='UsageOptimization/OrphanedResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Application Gateway without any backend pool',     x_RecommendationSolution='Review and remove this resource if not needed',     ResourceId = tolower(id),     x_ResourceType=type,     ResourceName=tolower(AppGWName),     x_RecommendationDetails= strcat('{\\\"backendIPCount\\\": ', backendIPCount, ',\\\"Location\\\": \\\"', Location, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "LBsWithoutBackendRecommendations",
            "query": "resources| extend SKUName=tostring(sku.name) | extend SKUTier=tostring(sku.tier), Location=location | extend backendAddressPools = properties.backendAddressPools| where type =~ 'microsoft.network/loadbalancers' and array_length(backendAddressPools) == 0 and sku.name!='Basic' | extend id,name, SKUName,SKUTier,backendAddressPools, location,resourceGroup, subscriptionId, type| project     x_RecommendationId=strcat(tolower(id),'-idle'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='High',     x_RecommendationTypeId='ab703887-fa23-4915-abdc-3defbea89f7a',     x_RecommendationControl='UsageOptimization/OrphanedResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Load balancer without a backend pool',     x_RecommendationSolution='Review and remove this resource if not needed',     ResourceId = tolower(id),     x_ResourceType=type,     ResourceName=tolower(name),     x_RecommendationDetails= strcat('{\\\"SKUName\\\": ', SKUName, ',\\\"SKUTier\\\": \\\"', SKUTier, ',\\\"Location\\\": \\\"', Location, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "UnattachedPublicIPsRecommendations",
            "query": "resources | where type =~ 'Microsoft.Network/publicIPAddresses' and isempty(properties.ipConfiguration) and isempty(properties.natGateway) and properties.publicIPAllocationMethod =~ 'Static' | extend PublicIpId=id, IPName=name, AllocationMethod=tostring(properties.publicIPAllocationMethod), SKUName=sku.name, Location=location | project PublicIpId, IPName, SKUName, resourceGroup, Location, AllocationMethod, subscriptionId, type, name | union ( resources | where type =~ 'microsoft.network/networkinterfaces' and isempty(properties.virtualMachine) and isnull(properties.privateEndpoint) and isnotempty(properties.ipConfigurations) | extend IPconfig = properties.ipConfigurations | mv-expand IPconfig | extend PublicIpId= tostring(IPconfig.properties.publicIPAddress.id) | project PublicIpId, name | join ( resources | where type =~ 'Microsoft.Network/publicIPAddresses'| extend PublicIpId=id, IPName=name, AllocationMethod=tostring(properties.publicIPAllocationMethod), SKUName=sku.name, resourceGroup, Location=location, name, id ) on PublicIpId | extend PublicIpId,IPName, SKUName, resourceGroup, Location, AllocationMethod,name, subscriptionId )| project     x_RecommendationId=strcat(tolower(PublicIpId),'-idle'),     x_ResourceGroupName=tolower(resourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='Low',     x_RecommendationTypeId='3ecbf770-9404-4504-a450-cc198e8b2a7d',     x_RecommendationControl='UsageOptimization/OrphanedResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Unattached (orphaned) public IP is incurring in networking costs',     x_RecommendationSolution='Review and remove this resource if not needed',     ResourceId = tolower(PublicIpId),     x_ResourceType=type,     ResourceName=tolower(name),     x_RecommendationDetails= strcat('{\\\"SKUName\\\": ', SKUName, ',\\\"AllocationMethod\\\": \\\"', AllocationMethod,',\\\"Location\\\": \\\"', Location, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "EmptySQLElasticPoolsRecommendations",
            "query": "resources | where type == 'microsoft.sql/servers/elasticpools'| extend elasticPoolId = tolower(tostring(id)), elasticPoolName = name, elasticPoolRG = resourceGroup,skuName=tostring(sku.name),skuTier=tostring(sku.tier),skuCapacity=tostring(sku.capacity), Location=location, type| join kind=leftouter ( resources | where type == 'microsoft.sql/servers/databases'| extend elasticPoolId = tolower(tostring(properties.elasticPoolId)) ) on elasticPoolId| summarize databaseCount = countif(isnotempty(elasticPoolId1)) by elasticPoolId, elasticPoolName,serverResourceGroup=resourceGroup,name,skuName,skuTier,skuCapacity,elasticPoolRG,Location, type, subscriptionId| where databaseCount == 0 | project elasticPoolId, elasticPoolName, databaseCount, elasticPoolRG ,skuName,skuTier ,skuCapacity, Location, type, subscriptionId| project     x_RecommendationId=strcat(tolower(elasticPoolId),'-idle'),     x_ResourceGroupName=tolower(elasticPoolRG),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='High',     x_RecommendationTypeId='50987aae-a46d-49ae-bd41-a670a4dd18bd',     x_RecommendationControl='UsageOptimization/OrphanedResources',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='SQL Database elastic pool has no associated databases',     x_RecommendationSolution='Review and remove this resource if not needed',     ResourceId = tolower(elasticPoolId),     x_ResourceType=type,     ResourceName=tolower(elasticPoolName),     x_RecommendationDetails= strcat('{\\\"skuName\\\": ', skuName, ',\\\"skuTier\\\": \\\"', skuTier,',\\\"skuCapacity\\\": \\\"', skuCapacity,',\\\"Location\\\": \\\"', Location, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "VMsWithoutAHBRecommendations",
            "query": "resourcecontainers | where type =~ 'Microsoft.Resources/subscriptions' | where tostring (properties.subscriptionPolicies.quotaId) !has 'MSDNDevTest_2014-09-01' | extend SubscriptionName=name | join (    resources     | where type =~ 'microsoft.compute/virtualmachines' or type =~ 'microsoft.compute/virtualMachineScaleSets'    | where tostring(properties.storageProfile.imageReference.publisher ) == 'MicrosoftWindowsServer' or tostring(properties.virtualMachineProfile.storageProfile.osDisk.osType) == 'Windows' or tostring(properties.storageProfile.imageReference.publisher ) == 'microsoftsqlserver'    | where tostring(properties.['licenseType']) !has 'Windows' and tostring(properties.virtualMachineProfile.['licenseType']) == 'Windows_Server'    | extend WindowsId=id, VMSku=tostring(properties.hardwareProfile.vmSize), vmResourceGroup=resourceGroup, vmType=type, Location=location,LicenseType = tostring(properties.['licenseType'])    | extend ActualCores = toint(extract('.[A-Z]([0-9]+)', 1, tostring(properties.hardwareProfile.vmSize)))    | extend CheckAHBWindows = case(        type == 'microsoft.compute/virtualmachines' or type =~ 'microsoft.compute/virtualMachineScaleSets', iif((properties.['licenseType'])        !has 'Windows' and (properties.virtualMachineProfile.['licenseType']) !has 'Windows' , 'AHB-disabled', 'AHB-enabled'),        'Not Windows'    )) on subscriptionId | project     x_RecommendationId=strcat(tolower(WindowsId),'-CheckAHBWindows'),     x_ResourceGroupName=tolower(vmResourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='Medium',     x_RecommendationTypeId='f326c065-b9f7-4a0e-a0f1-5a1c060bc25d',     x_RecommendationControl='RateOptimization/Licensing',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='Windows virtual machine is not leveraging Azure Hybrid Benefit',     x_RecommendationSolution='Review the virtual machine licensing option',     ResourceId = tolower(WindowsId),     x_ResourceType=vmType,     ResourceName=tolower(split(WindowsId,'/')[-1]),     x_RecommendationDetails= strcat('{\\\"VMSku\\\": ', VMSku, ',\\\"CheckAHBWindows\\\": \\\"', CheckAHBWindows,',\\\"ActualCores\\\": \\\"', ActualCores,',\\\"Location\\\": \\\"', Location, '\\\" }'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        },
        {
            "version": "1.0",
            "source": "ResourceGraph",
            "provider": "Microsoft",
            "type": "SQLVMsWithoutAHBRecommendations",
            "query": "resourcecontainers | where type =~ 'Microsoft.Resources/subscriptions' | where tostring (properties.subscriptionPolicies.quotaId) !has 'MSDNDevTest_2014-09-01' | extend SubscriptionName=name | join (     resources | where type =~ 'Microsoft.SqlVirtualMachine/SqlVirtualMachines' and tostring(properties.['sqlServerLicenseType']) != 'AHUB'     | extend SQLID=id, VMName = name, resourceGroup, Location = location, LicenseType = tostring(properties.['sqlServerLicenseType']), OSType=tostring(properties.storageProfile.imageReference.offer), SQLAgentType = tostring(properties.['sqlManagement']), SQLVersion = tostring(properties.['sqlImageOffer']), SQLSKU=tostring(properties.['sqlImageSku'])) on subscriptionId | join (    resources    | where type =~ 'Microsoft.Compute/virtualmachines'    | extend ActualCores = toint(extract('.[A-Z]([0-9]+)', 1, tostring(properties.hardwareProfile.vmSize)))    | project VMName = tolower(name), VMSize = tostring(properties.hardwareProfile.vmSize),ActualCores, subscriptionId, vmType=type, vmResourceGroup=resourceGroup) on VMName| order by id asc    | where SQLSKU != 'Developer' and SQLSKU != 'Express'| extend CheckAHBSQLVM= case(    type == 'Microsoft.SqlVirtualMachine/SqlVirtualMachines', iif((properties.['sqlServerLicenseType']) != 'AHUB', 'AHB-disabled', 'AHB-enabled'),    'Not Windows')| project SQLID,VMName,resourceGroup, Location, VMSize, SQLVersion, SQLSKU, SQLAgentType, LicenseType, SubscriptionName,type,CheckAHBSQLVM, subscriptionId,ActualCores, vmType, vmResourceGroup| project     x_RecommendationId=strcat(tolower(SQLID),'-CheckAHBSQLVM'),     x_ResourceGroupName=tolower(vmResourceGroup),     SubAccountId=subscriptionId,     x_RecommendationCategory='Cost',     x_RecommendationImpact='High',     x_RecommendationTypeId='01decd62-f91b-4434-abe5-9a09e13e018f',     x_RecommendationControl='RateOptimization/Licensing',     x_RecommendationMaturityLevel='Preview',     x_RecommendationDescription='SQL virtual machine is not leveraging Azure Hybrid Benefit',     x_RecommendationSolution='Review the SQL licensing option',     ResourceId = tolower(SQLID),     x_ResourceType=vmType,     ResourceName=tolower(VMName),     x_RecommendationDetails= strcat('{\\\"VMSize\\\": \\\"', VMSize, '\\\", \\\"CheckAHBSQLVM\\\": \\\"', CheckAHBSQLVM, '\\\", \\\"ActualCores\\\": \\\"', ActualCores, '\\\", \\\"SQLVersion\\\": \\\"', SQLVersion, '\\\", \\\"SQLSKU\\\": \\\"', SQLSKU, '\\\", \\\"SQLAgentType\\\": \\\"', SQLAgentType, '\\\", \\\"LicenseType\\\": \\\"', LicenseType, '\\\", \\\"Location\\\": \\\"', Location, '\\\"}'),     x_RecommendationDate = now() | join kind=leftouter ( resourcecontainers | where type == 'microsoft.resources/subscriptions' | project SubAccountName=name, SubAccountId=subscriptionId ) on SubAccountId | project-away SubAccountId1"
        }
    ]
}